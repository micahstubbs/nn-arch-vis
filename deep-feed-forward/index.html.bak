<!DOCTYPE html>
<meta charset='utf-8'>
<style>
</style>
<body>
<script src='d3.v3.min.js'></script>
<script src='babel.min.js'></script>
<script src='cellStyles.js'></script>
<script>
// scripts online
// '//d3js.org/d3.v3.min.js'
// 'https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.10.3/babel.min.js'
var width = 960,
    height = 500,
    radius = 20;

const margin = { top: 0, left: 40, bottom: 0, right: 40 };

var fill = d3.scale.category20();

var force = d3.layout.force()
    .gravity(0.05)
    .charge(-50) // -50
    .linkDistance(50)
    .size([width, height])
    .linkStrength(0.005)
    .friction(0.9)
    .theta(0.8)
    .alpha(0.1)

var svg = d3.select('body').append('svg')
    .attr('width', width)
    .attr('height', height);

svg.append('rect')
  .attr('width', width)
  .attr('height', height)
  .style({
    fill: 'none',
    stroke: 'black',
    'stroke-width': 1
  });

d3.json('graph.json', function(error, graph) {
  if (error) throw error;

  graph.nodes.forEach((node, i) => {
    if (typeof node.id === 'undefined') node.id = i;
  })
  
  var tooltip = d3.select('body')
		.append('div')
		.style('position', 'absolute')
		.style('z-index', '10')
		.style('visibility', 'hidden');
  
  var link = svg.selectAll('line')
      .data(graph.links)
    .enter().append('line');

  var node = svg.selectAll('circle')
    .data(graph.nodes)
    .enter().append('circle')
      .attr('r', radius - .75)
      .style('fill', function(d) { 
        console.log('d from the fill function', d);
        return cellStyles[d.name].color; 
      })
      .style('stroke', 'none')
      .call(force.drag);

  svg.selectAll('circle')
    .append('text')
    .style('stroke', 'black')
    .text(d => d.id);

  force
      .nodes(graph.nodes)
      .links(graph.links)
      .on('tick', tick)
      .start();

  const maxDepth = d3.max(graph.nodes.map(d => d.depth));
  const chartInnerWidth = width - margin.left - margin.right;
  const maxNodeInnerWidth = chartInnerWidth / maxDepth;
  const nodeInnerWidth = d3.min([radius * 3, maxNodeInnerWidth]);
  const chartMiddle = margin.left + (chartInnerWidth / 2);
  const networkWidth = (nodeInnerWidth * maxDepth) + radius;
  console.log('maxDepth', maxDepth);
  console.log('chartInnerWidth', chartInnerWidth);
  console.log('maxNodeInnerWidth', maxNodeInnerWidth);
  console.log('nodeInnerWidth', nodeInnerWidth);
  console.log('chartMiddle', chartMiddle);
  console.log('networkWidth', networkWidth);

  function tick() {
    node.each(function(d) {
      d.x = (nodeInnerWidth * d.depth) + chartMiddle - (networkWidth / 2);
    })

    node.attr('cx', function(d) {return d.x = Math.max(radius, Math.min(width - radius, d.x)); })
        .attr('cy', function(d) {return d.y = Math.max(radius, Math.min(height - radius, d.y)); });
        

    link.attr('x1', function(d) { return d.source.x; })
        .attr('y1', function(d) { return d.source.y; })
        .attr('x2', function(d) { return d.target.x; })
        .attr('y2', function(d) { return d.target.y; });

    link
      .style('stroke', '#999')
      .style('stroke-width', '3px');
  }
  
  node
    .on('mouseover', function(d){
    	return tooltip
      	.text(d.name)
        .style('visibility', 'visible');
  	})
		.on('mousemove', function(){
    	return tooltip
      	.style('top', (event.pageY - 10) + 'px')
        .style('left',(event.pageX + 10) + 'px');
  	})
		.on('mouseout', function(){
    	return tooltip
        .style('visibility', 'hidden')
  	});
});

</script>
